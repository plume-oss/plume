plugins {
    id 'java'
    id 'maven-publish'
    id 'jacoco'
    id 'com.eden.orchidPlugin' version "0.21.0"
    id 'com.avast.gradle.docker-compose' version '0.10.11'
    id 'org.jetbrains.kotlin.jvm' version '1.3.72'
    id 'scala'
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2')
    }
    mavenCentral()
    jcenter()
    maven { url = "https://kotlin.bintray.com/kotlinx/" }
}

dependencies {
    // Logging
    implementation 'org.apache.logging.log4j:log4j-core:2.13.3'
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.13.3'

    // Core dependencies
    implementation 'org.apache.tinkerpop:gremlin-core:3.4.8'
    implementation 'org.apache.tinkerpop:tinkergraph-gremlin:3.4.8'
    implementation 'org.apache.tinkerpop:gremlin-driver:3.4.8'
    implementation 'org.janusgraph:janusgraph-driver:0.5.2'
    implementation 'com.steelbridgelabs.oss:neo4j-gremlin-bolt:0.4.4'
    implementation 'khttp:khttp:1.0.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.11.2'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.3.72'
    implementation 'org.jetbrains.kotlin:kotlin-reflect:1.3.72'
    implementation 'io.shiftleft:codepropertygraph_2.13:1.3.5'
    implementation 'org.soot-oss:soot:4.2.1'
    implementation 'org.python:jython-standalone:2.7.2'
    implementation 'org.apache.ant:ant:1.10.8'
    implementation 'org.mozilla:rhino:1.7.13'
    implementation 'org.lz4:lz4-java:1.7.1'

    // CPG integration
    implementation project(":cpgconv")

    // Orchid Docs
    orchidRuntime 'io.github.javaeden.orchid:OrchidDocs:0.21.0'
    orchidRuntime 'io.github.javaeden.orchid:OrchidKotlindoc:0.21.0'
    orchidRuntime 'io.github.javaeden.orchid:OrchidPluginDocs:0.21.0'
    orchidRuntime 'io.github.javaeden.orchid:OrchidGithub:0.21.0'

    // Kotlin
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.3.72'
    implementation 'org.jetbrains.kotlin:kotlin-reflect:1.3.72'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.4.2'
    testImplementation 'org.apache.tinkerpop:tinkergraph-gremlin:3.4.5'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-api:5.4.2'
}

sourceSets {
    main.java.srcDirs = []
    main.kotlin.srcDirs = ['src/main/kotlin']
    main.resources.srcDirs = ['src/main/resources']
    test.java.srcDirs = ['src/test/kotlin']
    test.resources.srcDirs = ['src/test/resources']
}

test {
    useJUnitPlatform()
    exclude "**/*IntTest*"

    testLogging {
        events 'FAILED', 'SKIPPED'
    }
}

task janusGraphIntTest(type: Test) {
    useJUnitPlatform()
    description = "Execute JanusGraph integration tests."
    group = "verification"
    include "**/*JanusGraph*"

    testLogging {
        events 'FAILED', 'SKIPPED'
    }
    doFirst {
        dockerCompose.exposeAsEnvironment(janusGraphIntTest)
    }
}

task tigerGraphIntTest(type: Test) {
    useJUnitPlatform()
    description = "Execute TigerGraph integration tests."
    group = "verification"
    include "**/*TigerGraph*"

    testLogging {
        events 'FAILED', 'SKIPPED'
    }
    doFirst {
        dockerCompose.exposeAsEnvironment(tigerGraphIntTest)
    }
}

task neptuneIntTest(type: Test) {
    useJUnitPlatform()
    description = "Execute Neptune integration tests."
    group = "verification"
    include "**/*Neptune*"

    testLogging {
        events 'FAILED', 'SKIPPED'
    }
}

task neo4jIntTest(type: Test) {
    useJUnitPlatform()
    description = "Execute Neo4j integration tests."
    group = "verification"
    include "**/*Neo4j*"

    testLogging {
        events 'FAILED', 'SKIPPED'
    }
    doFirst {
        dockerCompose.exposeAsEnvironment(neo4jIntTest)
    }
}

dockerCompose {
    janusGraphSetup {
        useComposeFiles = ['src/test/resources/docker/janus-berkeleyje-lucene.yml']
        isRequiredBy(project.tasks.janusGraphIntTest)
    }
    tigerGraphSetup {
        useComposeFiles = ['src/test/resources/docker/tigergraph.yml']
        isRequiredBy(project.tasks.tigerGraphIntTest)
    }
    neo4jGraphSetup {
        useComposeFiles = ['src/test/resources/docker/neo4j.yml']
        isRequiredBy(project.tasks.neo4jIntTest)
    }
}

jacoco {
    toolVersion = "0.8.5"
}

jacocoTestReport {
    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        html.enabled true
        html.destination file("${buildDir}/reports/jacoco")
        csv.enabled false
    }
    executionData test, janusGraphIntTest, tigerGraphIntTest, neo4jIntTest
}

orchid {
    theme = "Editorial"
    baseUrl = "https://plume-oss.github.io/plume"
    version = "0.0.1"
    githubToken = System.getenv("ORCHID_TOKEN")
}

check.dependsOn jacocoTestCoverageVerification
jacocoTestCoverageVerification.dependsOn jacocoTestReport

group = 'za.ac.sun.plume'
version = 'X.X.X'
description = 'Projects bytecode into a code-property graph which is inserted it into a graph database. ' +
        'A type-safe interface for connecting and writing to various graph databases is provided.' +
        'This based on the code-property graph schema.'
sourceCompatibility = '8'

task fatJar(type: Jar) {
    archiveClassifier.set('all')
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    with jar
}

artifacts {
    archives fatJar
}

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
