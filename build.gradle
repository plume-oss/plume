plugins {
    id "java"
    id "maven-publish"
    id "jacoco"
    id "com.eden.orchidPlugin" version "$orchidVersion"
    id "com.avast.gradle.docker-compose" version "$avastDockerVersion"
    id "org.jetbrains.kotlin.jvm" version "$kotlinVersion"
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven { url = "https://kotlin.bintray.com/kotlinx/" }
}

dependencies {
    // Logging
    implementation "org.apache.logging.log4j:log4j-core:2.13.3"
    implementation "org.apache.logging.log4j:log4j-slf4j-impl:2.13.3"

    // Core dependencies
    implementation "org.apache.tinkerpop:gremlin-core:$gremlinVersion"
    implementation "org.apache.tinkerpop:tinkergraph-gremlin:$gremlinVersion"
    implementation "org.apache.tinkerpop:gremlin-driver:$gremlinVersion"
    implementation "org.janusgraph:janusgraph-driver:$jgVersion"
    implementation "com.steelbridgelabs.oss:neo4j-gremlin-bolt:$neo4jGremlinVersion"
    implementation "khttp:khttp:$khttpVersion"
    implementation "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    implementation "io.shiftleft:codepropertygraph_2.13:$shiftleftVersion"
    implementation "io.shiftleft:semanticcpg_2.13:$shiftleftVersion"
    implementation "org.soot-oss:soot:$sootVersion"
    implementation "org.python:jython-standalone:$jythonVersion"
    implementation "org.apache.ant:ant:$antVersion"
    implementation "org.mozilla:rhino:$rhinoVersion"
    implementation "org.lz4:lz4-java:$lz4Version"

    // CPG integration
    implementation project(":cpgconv")

    // Orchid Docs
    orchidRuntime "io.github.javaeden.orchid:OrchidDocs:$orchidVersion"
    orchidRuntime "io.github.javaeden.orchid:OrchidKotlindoc:$orchidVersion"
    orchidRuntime "io.github.javaeden.orchid:OrchidPluginDocs:$orchidVersion"
    orchidRuntime "io.github.javaeden.orchid:OrchidGithub:$orchidVersion"

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"

    // Testing
    testImplementation "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-api:$junitVersion"
}

sourceSets {
    main.java.srcDirs = []
    main.kotlin.srcDirs = ["src/main/kotlin"]
    main.resources.srcDirs = ["src/main/resources"]
    test.java.srcDirs = ["src/test/kotlin"]
    test.resources.srcDirs = ["src/test/resources"]
}

test {
    useJUnitPlatform()
    exclude "**/*IntTest*", "**/extractor/**"

    testLogging {
        events "FAILED", "SKIPPED"
    }
}

task extractorTest(type: Test) {
    useJUnitPlatform()
    description = "Execute extractor tests."
    group = "verification"
    include "**/extractor/**"

    testLogging {
        events "FAILED", "SKIPPED"
    }
}

task tinkerGraphIntTest(type: Test) {
    useJUnitPlatform()
    description = "Execute TinkerGraph integration tests."
    group = "verification"
    include "**/*TinkerGraph*"

    testLogging {
        events "FAILED", "SKIPPED"
    }
}

task overflowDbIntTest(type: Test) {
    useJUnitPlatform()
    description = "Execute OverflowDb integration tests."
    group = "verification"
    include "**/*OverflowDb*"

    testLogging {
        events "FAILED", "SKIPPED"
    }
}

task janusGraphIntTest(type: Test) {
    useJUnitPlatform()
    description = "Execute JanusGraph integration tests."
    group = "verification"
    include "**/*JanusGraph*"

    testLogging {
        events "FAILED", "SKIPPED"
    }
    doFirst {
        dockerCompose.exposeAsEnvironment(janusGraphIntTest)
    }
}

task tigerGraphIntTest(type: Test) {
    useJUnitPlatform()
    description = "Execute TigerGraph integration tests."
    group = "verification"
    include "**/*TigerGraph*"

    testLogging {
        events "FAILED", "SKIPPED"
    }
    doFirst {
        dockerCompose.exposeAsEnvironment(tigerGraphIntTest)
    }
}

task neptuneIntTest(type: Test) {
    useJUnitPlatform()
    description = "Execute Neptune integration tests."
    group = "verification"
    include "**/*Neptune*"

    testLogging {
        events "FAILED", "SKIPPED"
    }
}

task neo4jIntTest(type: Test) {
    useJUnitPlatform()
    description = "Execute Neo4j integration tests."
    group = "verification"
    include "**/*Neo4j*"

    testLogging {
        events "FAILED", "SKIPPED"
    }
    doFirst {
        dockerCompose.exposeAsEnvironment(neo4jIntTest)
    }
}

dockerCompose {
    janusGraphSetup {
        useComposeFiles = ["src/test/resources/docker/janus-berkeleyje-lucene.yml"]
        isRequiredBy(project.tasks.janusGraphIntTest)
    }
    tigerGraphSetup {
        useComposeFiles = ["src/test/resources/docker/tigergraph.yml"]
        isRequiredBy(project.tasks.tigerGraphIntTest)
    }
    neo4jGraphSetup {
        useComposeFiles = ["src/test/resources/docker/neo4j.yml"]
        isRequiredBy(project.tasks.neo4jIntTest)
    }
}

jacoco {
    toolVersion = "0.8.5"
}

jacocoTestReport {
    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        html.enabled true
        html.destination file("${buildDir}/reports/jacoco")
        csv.enabled false
    }
    executionData test, extractorTest, tinkerGraphIntTest, overflowDbIntTest, janusGraphIntTest, tigerGraphIntTest, neo4jIntTest
}

orchid {
    theme = "Editorial"
    baseUrl = "https://plume-oss.github.io/plume"
    version = "0.0.1"
    githubToken = System.getenv("ORCHID_TOKEN")
}

check.dependsOn jacocoTestCoverageVerification
jacocoTestCoverageVerification.dependsOn jacocoTestReport

group = "za.ac.sun.plume"
version = "0.0.1"
description = "Plume is a code property graph analysis library with options to extract the CPG from Java bytecode and store the result in various graph databases."
sourceCompatibility = "8"

// Binds the main project and Scala layer into one Jar
def mainProjects = [":cpgconv"]
task oneJar( type: Jar , dependsOn: mainProjects.collect{ it + ":compileJava"}) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from files(mainProjects.collect{ project(it).sourceSets.main.output }) {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    with jar
}

task fatJar(type: Jar) {
    archiveClassifier.set("all")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    with jar
}

artifacts {
    archives oneJar, fatJar
}

tasks.register("sourcesJar", Jar) {
    from sourceSets.main.allJava
    classifier "sources"
}

tasks.register("javadocJar", Jar) {
    from javadoc
    classifier "javadoc"
}

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
