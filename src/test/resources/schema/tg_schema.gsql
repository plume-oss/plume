DROP ALL

# Vertices

## Basic CPG vertex
CREATE VERTEX CPG_VERT (
    PRIMARY_ID id STRING,
    label STRING DEFAULT "UNKNOWN",
    argumentIndex INT DEFAULT -1,
    dispatchType STRING DEFAULT "STATIC_DISPATCH",
    evaluationStrategy STRING DEFAULT "BY_REFERENCE",
    methodFullName STRING DEFAULT "null",
    methodInstFullName STRING DEFAULT "null",
    typeFullName STRING DEFAULT "null",
    typeDeclFullName STRING DEFAULT "null",
    dynamicTypeHintFullName STRING DEFAULT "null",
    code STRING DEFAULT "null",
    columnNumber INT DEFAULT -1,
    lineNumber INT DEFAULT -1,
    name STRING DEFAULT "null",
    fullName STRING DEFAULT "null",
    canonicalName STRING DEFAULT "null",
    astOrder INT DEFAULT -1,
    signature STRING DEFAULT "()",
    hash STRING DEFAULT "null"
)
## Language Dependent
CREATE VERTEX META_DATA_VERT (
    PRIMARY_ID id INT,
    label STRING DEFAULT "META_DATA",
    language STRING DEFAULT "JAVA",
    version STRING DEFAULT "1.8"
)

# Edges

CREATE DIRECTED EDGE AST (FROM CPG_VERT, TO CPG_VERT)
CREATE DIRECTED EDGE CFG (FROM CPG_VERT, TO CPG_VERT)
CREATE DIRECTED EDGE CAPTURED_BY (FROM CPG_VERT, TO CPG_VERT)
CREATE DIRECTED EDGE BINDS_TO (FROM CPG_VERT, TO CPG_VERT)
CREATE DIRECTED EDGE REF (FROM CPG_VERT, TO CPG_VERT)
CREATE DIRECTED EDGE RECEIVER (FROM CPG_VERT, TO CPG_VERT)
CREATE DIRECTED EDGE CONDITION (FROM CPG_VERT, TO CPG_VERT)
CREATE DIRECTED EDGE BINDS (FROM CPG_VERT, TO CPG_VERT)
CREATE DIRECTED EDGE ARGUMENT (FROM CPG_VERT, TO CPG_VERT)
CREATE DIRECTED EDGE SOURCE_FILE (FROM CPG_VERT, TO CPG_VERT)

CREATE GRAPH cpg (*)

CREATE QUERY areVerticesJoinedByEdge(VERTEX<CPG_VERT> vFrom, VERTEX<CPG_VERT> vTo, STRING edgeLabel) FOR GRAPH cpg {
  bool result;
  setFrom = {ANY};
  temp = SELECT tgt
          FROM setFrom:src -(:e)- :tgt
          WHERE src == vFrom
            AND tgt == vTo
            AND e.type == edgeLabel;
  result = (temp.size() > 0);
  PRINT result;
}

CREATE QUERY showAll() FOR GRAPH cpg {
  SetAccum<EDGE> @@edges;
  allVert = {ANY};
  result = SELECT s
           FROM allVert:s -(:e)-> :t
           ACCUM @@edges += e;
  PRINT allVert;
  PRINT @@edges;
}

CREATE QUERY getMethod(VERTEX<CPG_VERT> methodHash) FOR GRAPH cpg {
  SetAccum<EDGE> @@edges;
  OrAccum @visited;
  start = {methodHash};
  allVert = {methodHash};

  WHILE start.size() > 0 DO
	  start = SELECT t
	          FROM start:s -((AST|REF|CFG|ARGUMENT|CAPTURED_BY|BINDS_TO|RECEIVER|CONDITION|BINDS):e) ->:t
	          WHERE NOT t.@visited
	          ACCUM t.@visited = TRUE, @@edges += e;
    allVert = allVert UNION start;
	END;

  finalEdges = SELECT t
               FROM allVert -((AST|REF|CFG|ARGUMENT|CAPTURED_BY|BINDS_TO|RECEIVER|CONDITION|BINDS):e)->:t
               ACCUM @@edges += e;

  PRINT allVert;
  PRINT @@edges;
}

CREATE QUERY getProgramStructure() FOR GRAPH cpg {
  SetAccum<EDGE> @@edges;
  OrAccum @visited;
  start = {CPG_VERT.*};
  start = SELECT s
          FROM start:s -(:e)-> :t
          WHERE s.label == "FILE";
  allVert = start;

  WHILE start.size() > 0 DO
	  start = SELECT t
	          FROM start:s -(AST:e) ->:t
	          WHERE NOT t.@visited
	          ACCUM t.@visited = TRUE, @@edges += e;
    allVert = allVert UNION start;
	END;

  finalEdges = SELECT t
               FROM allVert -(AST:e)->:t
               ACCUM @@edges += e;

  PRINT allVert;
  PRINT @@edges;
}

CREATE QUERY getNeighbours(VERTEX<CPG_VERT> source) FOR GRAPH cpg {
  SetAccum<EDGE> @@edges;
  seed = {CPG_VERT.*};
  sourceSet = {source};
  outVert = SELECT tgt
            FROM seed:src -(:e)- CPG_VERT:tgt
            WHERE src == source
            ACCUM @@edges += e;
  inVert = SELECT src
            FROM seed:src -(:e)- CPG_VERT:tgt
            WHERE tgt == source
            ACCUM @@edges += e;
  allVert = inVert UNION outVert;
  allVert = allVert UNION sourceSet;

  PRINT allVert;
  PRINT @@edges;
}

CREATE QUERY deleteMethod(VERTEX<CPG_VERT> methodHash) FOR GRAPH cpg {
  SetAccum<EDGE> @@edges;
  OrAccum @visited;
  start = {methodHash};
  allVert = {methodHash};

  WHILE start.size() > 0 DO
	  start = SELECT t
	          FROM start:s -((AST|REF|CFG|ARGUMENT|CAPTURED_BY|BINDS_TO|RECEIVER|CONDITION|BINDS):e) ->:t
	          WHERE NOT t.@visited
	          ACCUM t.@visited = TRUE, @@edges += e;
    allVert = allVert UNION start;
	END;

  DELETE s FROM allVert:s;
}

CREATE QUERY maxOrder() FOR GRAPH cpg {
  MaxAccum<INT> @@maxAstOrder;
  @@maxAstOrder += 0;
  start = {ANY};
  result = SELECT s
           FROM start:s
           ACCUM @@maxAstOrder += s.astOrder;
  PRINT @@maxAstOrder;
}

INSTALL QUERY ALL
