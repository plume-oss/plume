DROP ALL

# Vertices

## Basic CPG vertex
CREATE VERTEX CPG_VERT (
    PRIMARY_ID id UINT,
    label STRING DEFAULT "UNKNOWN",
    ARGUMENT_INDEX INT DEFAULT -1,
    DISPATCH_TYPE STRING DEFAULT "STATIC_DISPATCH",
    EVALUATION_STRATEGY STRING DEFAULT "BY_REFERENCE",
    METHOD_FULL_NAME STRING DEFAULT "null",
    METHOD_INST_FULL_NAME STRING DEFAULT "null",
    MODIFIER_TYPE STRING DEFAULT "null",
    TYPE_FULL_NAME STRING DEFAULT "null",
    TYPE_DECL_FULL_NAME STRING DEFAULT "null", # watch this in type decls, no longer available
    DYNAMIC_TYPE_FULL_NAME STRING DEFAULT "null", # watch this in type ref and calls
    DYNAMIC_TYPE_HINT_FULL_NAME STRING DEFAULT "null",
    CODE STRING DEFAULT "null",
    COLUMN_NUMBER INT DEFAULT -1,
    LINE_NUMBER INT DEFAULT -1,
    NAME STRING DEFAULT "null",
    FULL_NAME STRING DEFAULT "null",
    CANONICAL_NAME STRING DEFAULT "null",
    AST_ORDER INT DEFAULT -1,
    SIGNATURE STRING DEFAULT "()",
    HASH STRING DEFAULT "null"
) WITH primary_id_as_attribute="true"
## Language Dependent
CREATE VERTEX META_DATA_VERT (
    PRIMARY_ID id UINT,
    label STRING DEFAULT "META_DATA",
    LANGUAGE STRING DEFAULT "JAVA",
    VERSION STRING DEFAULT "1.8"
) WITH primary_id_as_attribute="true"

# Edges

CREATE DIRECTED EDGE AST (FROM CPG_VERT, TO CPG_VERT)
CREATE DIRECTED EDGE CFG (FROM CPG_VERT, TO CPG_VERT)
CREATE DIRECTED EDGE CAPTURED_BY (FROM CPG_VERT, TO CPG_VERT)
CREATE DIRECTED EDGE BINDS_TO (FROM CPG_VERT, TO CPG_VERT)
CREATE DIRECTED EDGE REF (FROM CPG_VERT, TO CPG_VERT)
CREATE DIRECTED EDGE RECEIVER (FROM CPG_VERT, TO CPG_VERT)
CREATE DIRECTED EDGE CONDITION (FROM CPG_VERT, TO CPG_VERT)
CREATE DIRECTED EDGE BINDS (FROM CPG_VERT, TO CPG_VERT)
CREATE DIRECTED EDGE ARGUMENT (FROM CPG_VERT, TO CPG_VERT)
CREATE DIRECTED EDGE SOURCE_FILE (FROM CPG_VERT, TO CPG_VERT)

CREATE GRAPH cpg (*)

CREATE QUERY areVerticesJoinedByEdge(VERTEX<CPG_VERT> V_FROM, VERTEX<CPG_VERT> V_TO, STRING EDGE_LABEL) FOR GRAPH cpg {
  bool result;
  setFrom = {ANY};
  temp = SELECT tgt
          FROM setFrom:src -(:e)- :tgt
          WHERE src == V_FROM
            AND tgt == V_TO
            AND e.type == EDGE_LABEL;
  result = (temp.size() > 0);
  PRINT result;
}

CREATE QUERY showAll() FOR GRAPH cpg {
  SetAccum<EDGE> @@edges;
  allVert = {ANY};
  result = SELECT s
           FROM allVert:s -(:e)-> :t
           ACCUM @@edges += e;
  PRINT allVert;
  PRINT @@edges;
}

CREATE QUERY getMethodHead(STRING FULL_NAME, STRING SIGNATURE) FOR GRAPH cpg {
  SetAccum<EDGE> @@edges;
  allV = {ANY};
  start = SELECT src
          FROM allV:src
          WHERE src.FULL_NAME == FULL_NAME AND src.SIGNATURE == SIGNATURE;
  allVert = start;

  start = SELECT t
          FROM start:s -(AST:e)-> :t
          ACCUM @@edges += e;
  allVert = allVert UNION start;

  PRINT allVert;
  PRINT @@edges;
}

CREATE QUERY getMethod(STRING FULL_NAME, STRING SIGNATURE) FOR GRAPH cpg {
  SetAccum<EDGE> @@edges;
  OrAccum @visited;
  allV = {ANY};
  start = SELECT src
          FROM allV:src
          WHERE src.FULL_NAME == FULL_NAME AND src.SIGNATURE == SIGNATURE;
  allVert = start;

  WHILE start.size() > 0 DO
	  start = SELECT t
	          FROM start:s -((AST|REF|CFG|ARGUMENT|CAPTURED_BY|BINDS_TO|RECEIVER|CONDITION|BINDS):e) ->:t
	          WHERE NOT t.@visited
	          ACCUM t.@visited = TRUE, @@edges += e;
    allVert = allVert UNION start;
	END;

  finalEdges = SELECT t
               FROM allVert -((AST|REF|CFG|ARGUMENT|CAPTURED_BY|BINDS_TO|RECEIVER|CONDITION|BINDS):e)->:t
               ACCUM @@edges += e;

  PRINT allVert;
  PRINT @@edges;
}

CREATE QUERY getProgramStructure() FOR GRAPH cpg {
  SetAccum<EDGE> @@edges;
  OrAccum @visited;
  start = {CPG_VERT.*};
  start = SELECT s
          FROM start:s -(:e)-> :t
          WHERE s.label == "FILE";
  allVert = start;

  WHILE start.size() > 0 DO
	  start = SELECT t
	          FROM start:s -(AST:e) ->:t
	          WHERE NOT t.@visited
	          ACCUM t.@visited = TRUE, @@edges += e;
    allVert = allVert UNION start;
	END;

  finalEdges = SELECT t
               FROM allVert -(AST:e)->:t
               ACCUM @@edges += e;

  PRINT allVert;
  PRINT @@edges;
}

CREATE QUERY getNeighbours(VERTEX<CPG_VERT> SOURCE) FOR GRAPH cpg {
  SetAccum<EDGE> @@edges;
  seed = {CPG_VERT.*};
  sourceSet = {SOURCE};
  outVert = SELECT tgt
            FROM seed:src -(:e)- CPG_VERT:tgt
            WHERE src == SOURCE
            ACCUM @@edges += e;
  inVert = SELECT src
            FROM seed:src -(:e)- CPG_VERT:tgt
            WHERE tgt == SOURCE
            ACCUM @@edges += e;
  allVert = inVert UNION outVert;
  allVert = allVert UNION sourceSet;

  PRINT allVert;
  PRINT @@edges;
}

CREATE QUERY deleteMethod(STRING FULL_NAME, STRING SIGNATURE) FOR GRAPH cpg {
  SetAccum<EDGE> @@edges;
  OrAccum @visited;
  allV = {ANY};
  start = SELECT src
          FROM allV:src
          WHERE src.FULL_NAME == FULL_NAME AND src.SIGNATURE == SIGNATURE;
  allVert = start;

  WHILE start.size() > 0 DO
	  start = SELECT t
	          FROM start:s -((AST|REF|CFG|ARGUMENT|CAPTURED_BY|BINDS_TO|RECEIVER|CONDITION|BINDS):e) ->:t
	          WHERE NOT t.@visited
	          ACCUM t.@visited = TRUE, @@edges += e;
    allVert = allVert UNION start;
	END;

  DELETE s FROM allVert:s;
}

CREATE QUERY getVertexIds(INT LOWER_BOUND, INT UPPER_BOUND) FOR GRAPH cpg {
  SetAccum<INT> @@ids;
  start = {ANY};
  result = SELECT src
      FROM start:src
      WHERE src.id >= LOWER_BOUND AND src.id <= UPPER_BOUND
      ACCUM @@ids += src.id;
  PRINT @@ids;
}

CREATE QUERY status() FOR GRAPH cpg {
  INT status = 0;
  PRINT status;
}

INSTALL QUERY ALL
