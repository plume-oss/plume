buildscript {
    ext {
        internalDependencies = [project(':cpgconv')]
    }
}

plugins {
    id "java"
    id "maven"
    id "maven-publish"
    id "jacoco"
    id "org.jetbrains.dokka" version "$dokkaVersion"
    id "com.eden.orchidPlugin" version "$orchidVersion"
    id "com.avast.gradle.docker-compose" version "$avastDockerVersion"
    id "org.jetbrains.kotlin.jvm" version "$kotlinVersion"
    id "com.jfrog.bintray" version "$bintrayVersion"
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven { url = "https://kotlin.bintray.com/kotlinx/" }
}

configurations {
    subProject
    compileClasspath.extendsFrom(subProject)
    runtimeClasspath.extendsFrom(subProject)
    testRuntimeClasspath.extendsFrom(subProject)
}

dependencies {
    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinxVersion"

    // Logging
    compile "org.apache.logging.log4j:log4j-api:$log4jVersion"
    compile "org.apache.logging.log4j:log4j-core:$log4jVersion"
    compile "org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion"
    compile "org.slf4j:jul-to-slf4j:$slf4jVersion" // JUL bridge
    compile "org.slf4j:jcl-over-slf4j:$slf4jVersion" // Apache Commons Logging (JCL) bridge
    compile "org.slf4j:log4j-over-slf4j:$slf4jVersion" // log4j1.2 bridge
    compile "me.tongfei:progressbar:$progressBarVersion" // simple progress bar

    // Core dependencies
    implementation "org.apache.tinkerpop:gremlin-core:$gremlinVersion"
    implementation "org.apache.tinkerpop:tinkergraph-gremlin:$gremlinVersion"
    implementation "org.apache.tinkerpop:gremlin-driver:$gremlinVersion"
    implementation "org.janusgraph:janusgraph-driver:$jgVersion"
    implementation "org.neo4j.driver:neo4j-java-driver:$neo4jDriverVersion"
    implementation "khttp:khttp:$khttpVersion"
    implementation "com.tigergraph.client:gsql_client:$tigerGraphVersion"
    implementation "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    implementation "io.shiftleft:codepropertygraph_2.13:$shiftleftVersion"
    implementation "io.shiftleft:dataflowengineoss_2.13:$shiftleftVersion"
    implementation "io.shiftleft:semanticcpg_2.13:$shiftleftVersion"
    implementation "org.soot-oss:soot:$sootVersion"
    implementation "org.lz4:lz4-java:$lz4Version"
    implementation "org.cache2k:cache2k-api:$cache2kVersion"
    implementation "org.cache2k:cache2k-core:$cache2kVersion"

    // Sub-project integration
    subProject project(":cpgconv")

    // Orchid Docs
    orchidRuntime "io.github.javaeden.orchid:OrchidDocs:$orchidVersion"
    orchidRuntime "io.github.javaeden.orchid:OrchidKotlindoc:$orchidVersion"
    orchidRuntime "io.github.javaeden.orchid:OrchidPluginDocs:$orchidVersion"
    orchidRuntime "io.github.javaeden.orchid:OrchidGithub:$orchidVersion"

    // Testing
    testImplementation "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-api:$junitVersion"
}

sourceSets {
    main {
        java.srcDirs = []
        kotlin.srcDirs = ["src/main/kotlin"]
        resources.srcDirs = ["src/main/resources"]
    }
    test {
        java.srcDirs = []
        kotlin.srcDirs = ["src/test/kotlin"]
        resources.srcDirs = ["src/test/resources"]
    }
}

task allTests(
        type: Test,
        dependsOn: [
                "test",
                ":testing:scalatest",
                "extractorTest",
                "tinkerGraphIntTest",
                "overflowDbIntTest",
                "janusGraphIntTest",
                "neo4jIntTest",
                "tigerGraphIntTest",
                "jacocoTestReport"
        ]
) { group = "verification" }

tasks.withType(Test) {
    useJUnitPlatform()
    testLogging {
        events "FAILED", "SKIPPED", "STANDARD_ERROR"
        outputs.upToDateWhen { false }
        exceptionFormat "FULL"
        showCauses true
        showExceptions true
        showStackTraces true
    }
}

test {
    exclude "**/*IntTest*", "**/extractor/**"
}

task extractorTest(type: Test) {
    description = "Execute extractor tests."
    group = "verification"
    include "**/extractor/**"
}

task tinkerGraphIntTest(type: Test) {
    description = "Execute TinkerGraph integration tests."
    group = "verification"
    include "**/*TinkerGraph*"
}

task overflowDbIntTest(type: Test) {
    description = "Execute OverflowDb integration tests."
    group = "verification"
    include "**/*OverflowDb*"
}

task janusGraphIntTest(type: Test) {
    description = "Execute JanusGraph integration tests."
    group = "verification"
    include "**/*JanusGraph*"
    doFirst { dockerCompose.exposeAsEnvironment(janusGraphIntTest) }
}

task tigerGraphIntTest(type: Test) {
    description = "Execute TigerGraph integration tests."
    group = "verification"
    include "**/*TigerGraph*"
    doFirst { dockerCompose.exposeAsEnvironment(tigerGraphIntTest) }
}

task neptuneIntTest(type: Test) {
    description = "Execute Neptune integration tests."
    group = "verification"
    include "**/*Neptune*"
}

task neo4jIntTest(type: Test) {
    description = "Execute Neo4j integration tests."
    group = "verification"
    include "**/*Neo4j*"
    doFirst { dockerCompose.exposeAsEnvironment(neo4jIntTest) }
}

dockerCompose {
    janusGraphSetup {
        useComposeFiles = ["src/test/resources/docker/janus-berkeleyje-lucene.yml"]
        isRequiredBy(project.tasks.janusGraphIntTest)
    }
    tigerGraphSetup {
        useComposeFiles = ["src/test/resources/docker/tigergraph.yml"]
        isRequiredBy(project.tasks.tigerGraphIntTest)
    }
    neo4jGraphSetup {
        useComposeFiles = ["src/test/resources/docker/neo4j.yml"]
        isRequiredBy(project.tasks.neo4jIntTest)
    }
}

def artifactDesc = "Plume is a code property graph analysis library with options to extract the CPG from" +
        " Java bytecode and store the result in various graph databases."
def repoUrl = "https://github.com/plume-oss/plume.git"
def artifactVersion = rootProject.file('VERSION.md').text.trim()
def website = "https://plume-oss.github.io/plume-docs/"

group = "io.github.plume-oss"
version = artifactVersion
description = artifactDesc

orchid {
    theme = "Editorial"
    baseUrl = "https://plume-oss.github.io/plume"
    version = artifactVersion
    githubToken = System.getenv("ORCHID_TOKEN")
}

jacoco { toolVersion = "$jacocoVersion" }

jacocoTestReport {
    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        html.enabled true
        html.destination file("${buildDir}/reports/jacoco")
        csv.enabled false
    }
    executionData test, extractorTest, tinkerGraphIntTest, overflowDbIntTest, janusGraphIntTest, tigerGraphIntTest,
            neo4jIntTest
}

check.dependsOn jacocoTestCoverageVerification
jacocoTestCoverageVerification.dependsOn jacocoTestReport

task sourcesJar(type: Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archiveClassifier.set("sources")
    from(sourceSets.getByName("main").allSource)
    from { internalDependencies.collect { it.sourceSets.main.allSource } }
}

task dokkaJar(type: Jar) {
    group = JavaBasePlugin.DOCUMENTATION_GROUP
    description = "Assembles Kotlin docs with Dokka"
    archiveClassifier.set("javadoc")
    from(tasks.dokka)
    dependsOn(tasks.dokka)
}

// Binds the main project and Scala layer into one Jar
jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
        include "io/github/plume/oss/**"
    }

    manifest {
        attributes(
                'Implementation-Title': 'Plume',
                'Implementation-Version': artifactVersion
        )
    }
}

artifacts { archives sourcesJar, dokkaJar }

publishing {
    publications {
        mavenJava(MavenPublication) {
            // Main artifact
            from components.java
            // Sources
            artifact sourcesJar
            // Documentation artifact
            artifact dokkaJar

            pom {
                name = 'Plume'
                description = artifactDesc
                url = website
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer { id = 'DavidBakerEffendi'; name = 'David Baker Effendi'; email = 'dbe@sun.ac.za' }
                }
                scm {
                    connection = "scm:git:https://github.com/plume-oss/plume.git"
                    developerConnection = "scm:git:https://github.com/plume-oss/plume.git"
                    url = repoUrl
                }
            }
        }
    }
}

tasks.withType(JavaCompile) { options.encoding = "UTF-8" }

compileKotlin { kotlinOptions { jvmTarget = "1.8" } }
compileTestKotlin { kotlinOptions { jvmTarget = "1.8" } }
